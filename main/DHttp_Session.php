<?php
/**
 * Contralized session store.
 *
 * 可以像array, iterator那样使用本对象，也支持count()方法
 *
 * 使用memcache来使得session可以跨越多台服务器，但如果memcache
 * 死了，会造成部分用户session丢失
 *
 * 调用者要自己维护session keys，系统无法遍历所有keys，因此也
 * 就不提供getAll(), clearAll()等方法
 *
 * Internal:
 * memcache里key就是session id，value就是整个session的map
 *
 * @category http
 * @package http
 * @version $Id:$
 * @author gaopeng <gaopeng@corp.kaixin001.com>
 *
 * vim: set sw=4 ts=4 et:
 */

final class DHttp_Session implements ArrayAccess, Iterator, Countable
{

    const SESSION_TIMEOUT = 18000; // 5 hours

    /**
     * Session id.
     *
     * Generated by {@link DHttp_Request}.
     *
     * @var string
     */
    private $_id;

    /**
     * Session container.
     *
     * @var CMemcacheHandle
     */
    private $_store;

    /**
     * Local cache for session storage.
     *
     * To minimize memcache requests.
     *
     * @var array
     */
    private $_localCache;

    /**
     * @param string $id
     * @param CMemcacheHandle $store
     */
    public function __construct($id, $store)
    {
        $this->_localCache = array();
        $this->_id = $id;
        $this->_store = $store;
    }

    /**
     * Get session id.
     *
     * @return string
     */
    public function getId()
    {
        return $this->_id;
    }

    /**
     * Get a value from session.
     *
     * @param string $key
     *
     * @return mixed
     */
    public function getValue($key)
    {
        if (isset($this->_localCache[$key]))
        {
            // local cache hit
            return $this->_localCache[$key];
        }

        $this->_localCache = $this->_store->getObj($this->_id);
        return $this->_localCache[$key];
    }

    /**
     * Delete an item from session.
     *
     * @param string $key
     */
    public function delete($key)
    {
        unset($this->_localCache[$key]);
        $this->_store->setObj($this->_id, $this->_localCache, self::SESSION_TIMEOUT);
    }

    /**
     * Put an item to session.
     *
     * @param string $key
     * @param mixed $value
     */
    public function putValue($key, $value)
    {
        $this->_localCache[$key] = $value;
        $this->_store->setObj($this->_id, $this->_localCache, self::SESSION_TIMEOUT);
    }

    public function offsetExists($key)
    {
        return $this->getValue($key) != FALSE;
    }

    public function offsetGet($key)
    {
        return $this->getValue($key);
    }

    public function offsetSet($key, $value)
    {
        $this->putValue($key, $value);
    }

    public function offsetUnset($key)
    {
        $this->delete($key);
    }

    public function current()
    {
        return current($this->_localCache);
    }

    public function next()
    {
        return next($this->_localCache);
    }

    public function key()
    {
        return key($this->_localCache);
    }

    public function valid()
    {
        return current($this->_localCache) !== false;
    }

    public function rewind()
    {
        reset($this->_localCache);
    }

    public function count()
    {
        return count($this->_localCache);
    }

}
